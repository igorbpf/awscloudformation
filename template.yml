AWSTemplateFormatVersion: 2010-09-09
Description: "Run db migrations"
Parameters:
  FunctionName:
    Description: Function name
    Type: String
  BucketName:
    Description: S3 Bucket name
    Type: String
  RegionName:
    Description: Region name
    Type: String
  SecretName:
    Description: Secret name
    Type: String
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    DependsOn: BucketPermission
    Properties:
      BucketName: !Sub ${BucketName}
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:Put'
          Function: !GetAtt DBMigrations.Arn
  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt
        - DBMigrations
        - Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${BucketName}
  DBMigrations:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${FunctionName}
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
        - DBMigrationsRole
        - Arn
      Code:
        S3Bucket: igorlambdarepo
        S3Key: package.zip
      Runtime: python3.6
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
        - sg-0050841781f15d9e5
        SubnetIds:
        - subnet-e0f12adc
        - subnet-a47a0ced
      Environment:
        Variables:
          BUCKET_NAME: !Sub ${BucketName}
          REGION_NAME: !Sub ${RegionName}
          SECRET_NAME: !Sub ${SecretName}
  DBMigrationsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DBMigrationsRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: DBMigrationsSecretsManagerReadWrite
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - secretsmanager:*
            - cloudformation:CreateChangeSet
            - cloudformation:DescribeChangeSet
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStacks
            - cloudformation:ExecuteChangeSet
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSubnets
            - ec2:DescribeVpcs
            - kms:DescribeKey
            - kms:ListAliases
            - kms:ListKeys
            - lambda:ListFunctions
            - rds:DescribeDBClusters
            - rds:DescribeDBInstances
            - tag:GetResources
            Effect: Allow
            Resource: "*"
          - Action:
            - lambda:AddPermission
            - lambda:CreateFunction
            - lambda:GetFunction
            - lambda:InvokeFunction
            - lambda:UpdateFunctionConfiguration
            Effect: Allow
            Resource: arn:aws:lambda:*:*:function:SecretsManager*
          - Action:
            - serverlessrepo:CreateCloudFormationChangeSet
            Effect: Allow
            Resource: arn:aws:serverlessrepo:*:*:applications/SecretsManager*
          - Action:
            - s3:GetObject
            Effect: Allow
            Resource: arn:aws:s3:::awsserverlessrepo-changesets*
      - PolicyName: DBMigrationsAWSLambdaVPCAccessExecutionRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            Resource: "*"
      - PolicyName: DBMigrationsS3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:Get*
            - s3:List*
            Resource:
            - !Sub arn:aws:s3:::${BucketName}
            - !Sub arn:aws:s3:::${BucketName}/*
            Effect: Allow
